@{
    ViewData["Title"] = "Queue Viewer";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-aselsan-blue">
                        <i class="fas fa-list-alt me-2"></i>Queue Viewer
                    </h1>
                    <p class="text-muted mb-0">Monitor and manage job queue in real-time</p>
                </div>
                <div>
                    <span class="badge bg-aselsan-orange fs-6 px-3 py-2">
                        <i class="fas fa-database me-1"></i>Queue Manager
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row g-4 mb-4">
        <div class="col-xl-2 col-lg-4 col-md-6">
            <div class="card text-center fade-in-up">
                <div class="card-body">
                    <div class="stats-number text-aselsan-blue" id="totalJobs">-</div>
                    <div class="stats-label">Total Jobs</div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-4 col-md-6">
            <div class="card text-center fade-in-up" style="animation-delay: 0.1s">
                <div class="card-body">
                    <div class="stats-number text-primary" id="pendingJobs">-</div>
                    <div class="stats-label">Pending</div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-4 col-md-6">
            <div class="card text-center fade-in-up" style="animation-delay: 0.2s">
                <div class="card-body">
                    <div class="stats-number text-warning" id="processingJobs">-</div>
                    <div class="stats-label">Processing</div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-4 col-md-6">
            <div class="card text-center fade-in-up" style="animation-delay: 0.3s">
                <div class="card-body">
                    <div class="stats-number text-success" id="completedJobs">-</div>
                    <div class="stats-label">Completed</div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-4 col-md-6">
            <div class="card text-center fade-in-up" style="animation-delay: 0.4s">
                <div class="card-body">
                    <div class="stats-number text-danger" id="failedJobs">-</div>
                    <div class="stats-label">Failed</div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-4 col-md-6">
            <div class="card text-center fade-in-up" style="animation-delay: 0.5s">
                <div class="card-body">
                    <div class="stats-number text-info" id="successRate">-</div>
                    <div class="stats-label">Success Rate</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-end">
                        <div class="col-md-3">
                            <label for="statusFilter" class="form-label small fw-bold">Filter by Status:</label>
                            <select id="statusFilter" class="form-select">
                                <option value="all">All Status</option>
                                <option value="pending">Pending</option>
                                <option value="processing">Processing</option>
                                <option value="completed">Completed</option>
                                <option value="failed">Failed</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="searchInput" class="form-label small fw-bold">Search:</label>
                            <input type="text" id="searchInput" class="form-control" placeholder="Search by file path, app, or job ID...">
                        </div>
                        <div class="col-md-2">
                            <label for="pageSizeSelect" class="form-label small fw-bold">Page Size:</label>
                            <select id="pageSizeSelect" class="form-select">
                                <option value="25">25</option>
                                <option value="50" selected>50</option>
                                <option value="100">100</option>
                                <option value="200">200</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small fw-bold">Day:</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                <input type="date" id="dayPicker" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small fw-bold">All Days Stats:</label>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="allDaysToggle" onchange="loadAllDaysStats(this.checked)">
                                <label class="form-check-label small" for="allDaysToggle">Show all</label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" onclick="loadQueueData()">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                                <button class="btn btn-outline-secondary" onclick="resetFilters()">
                                    <i class="fas fa-undo me-1"></i>Reset
                                </button>
                                <button class="btn btn-outline-info" onclick="exportData()">
                                    <i class="fas fa-download me-1"></i>Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Queue Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-table me-2"></i>Job Queue Data
                    </h5>
                    <div>
                        <button class="btn btn-outline-primary btn-sm" onclick="loadQueueData()">
                            <i class="fas fa-sync-alt me-1"></i>Refresh
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th width="100">Status</th>
                                    <th width="120">Job ID</th>
                                    <th>File Path</th>
                                    <th width="100">Worker</th>
                                    <th width="120">Created</th>
                                    <th width="100">Duration</th>
                                    <th width="80">Retries</th>
                                    <th width="100">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="queueTableBody">
                                <tr>
                                    <td colspan="8" class="text-center py-4">
                                        <div class="loading-spinner mb-2"></div>
                                        <span class="text-muted">Loading queue data...</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted">
                            <span id="recordInfo">Loading...</span>
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0" id="pagination">
                                <!-- Pagination will be generated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Job Details Modal -->
<div class="modal fade" id="jobDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle me-2"></i>Job Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="jobDetailsContent">
                <!-- Job details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-warning" id="retryJobBtn" onclick="retryJob()" style="display: none;">
                    <i class="fas fa-redo me-1"></i>Retry Job
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        let totalPages = 1;
        let connection;

        // Initialize SignalR connection
        function initializeConnection() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/fileJobRouterHub")
                .withAutomaticReconnect([0, 2000, 10000, 30000])
                .build();

            // Event handlers
            connection.on("ReceiveQueueUpdate", function (queueData) {
                console.log('Queue update received:', queueData);
                if (queueData.action === "refresh_queue") {
                    loadQueueData(currentPage);
                }
            });

            connection.on("ReceiveLogUpdate", function (logMessage) {
                console.log('Log update:', logMessage);
            });

            // Connection events
            connection.start().then(function () {
                console.log("SignalR Connected to Queue page");
            }).catch(function (err) {
                console.error("SignalR Connection Error:", err.toString());
            });
        }

        function getLocalDateStr() {
            const d = new Date();
            const y = d.getFullYear();
            const m = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            return `${y}-${m}-${day}`;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // set default day to today and hook change
            const today = getLocalDateStr();
            const dayInput = document.getElementById('dayPicker');
            if (dayInput) {
                dayInput.value = today;
                dayInput.addEventListener('change', () => { loadStatistics(); loadQueueData(1); });
            }
            loadStatistics();
            loadQueueData();
            
            // Auto-refresh every 30 seconds
            setInterval(() => {
                loadStatistics();
                loadQueueData();
            }, 30000);

            // Search on Enter key
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    loadQueueData();
                }
            });
        });

        function loadStatistics() {
            fetch('/Queue/GetStatistics')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateStatistics(data.stats);
                    }
                })
                .catch(error => console.error('Error loading statistics:', error));
        }

        function updateStatistics(stats) {
            console.log('Updating statistics with:', stats);
            console.log('Stats details:', {
                total: stats.total,
                pending: stats.pending,
                processing: stats.processing,
                completed: stats.completed,
                failed: stats.failed,
                successRate: stats.successRate
            });
            
            const totalElement = document.getElementById('totalJobs');
            const pendingElement = document.getElementById('pendingJobs');
            const processingElement = document.getElementById('processingJobs');
            const completedElement = document.getElementById('completedJobs');
            const failedElement = document.getElementById('failedJobs');
            const successRateElement = document.getElementById('successRate');
            
            console.log('Found elements:', {
                totalElement: totalElement,
                pendingElement: pendingElement,
                processingElement: processingElement,
                completedElement: completedElement,
                failedElement: failedElement,
                successRateElement: successRateElement
            });
            
            if (totalElement) totalElement.textContent = stats.total || 0;
            if (pendingElement) pendingElement.textContent = stats.pending || 0;
            if (processingElement) processingElement.textContent = stats.processing || 0;
            if (completedElement) completedElement.textContent = stats.completed || 0;
            if (failedElement) failedElement.textContent = stats.failed || 0;
            if (successRateElement) successRateElement.textContent = (stats.successRate || 0) + '%';
            
            console.log('Statistics updated successfully');
        }

        function loadAllDaysStats(all) {
            if (all) {
                fetch('/Queue/GetAllDaysStatistics')
                    .then(r => r.json())
                    .then(d => { if (d.success) updateStatistics(d.stats); });
            } else {
                loadStatistics();
            }
        }

        function loadQueueData(page = 1) {
            const status = document.getElementById('statusFilter').value;
            const search = document.getElementById('searchInput').value;
            const pageSize = document.getElementById('pageSizeSelect').value;
            const day = document.getElementById('dayPicker')?.value || getLocalDateStr();

            const params = new URLSearchParams({
                page: page,
                pageSize: pageSize,
                status: status,
                search: search,
                day: day
            });

            fetch(`/Queue/GetQueueData?${params}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Queue data received:', data);
                    if (data.success) {
                        displayQueueData(data.data);
                        updatePagination(data.page, Math.ceil(data.total / data.pageSize), data.total);
                        currentPage = data.page;
                        totalPages = Math.ceil(data.total / data.pageSize);
                        
                        // Update statistics
                        if (data.stats) {
                            console.log('Stats received:', data.stats);
                            updateStatistics(data.stats);
                        } else {
                            console.log('No stats in response');
                        }
                    } else {
                        showError('Error loading queue data: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Queue data error:', error);
                    showError('Network error: ' + error.message);
                });
        }

        function displayQueueData(jobs) {
            const tbody = document.getElementById('queueTableBody');
            
            if (jobs.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <i class="fas fa-inbox fa-2x text-muted mb-2"></i>
                            <p class="text-muted mb-0">No jobs found</p>
                        </td>
                    </tr>`;
                return;
            }

            tbody.innerHTML = jobs.map(job => `
                <tr>
                    <td>
                        <span class="badge bg-${getStatusColor(job.status)}">${job.status}</span>
                    </td>
                    <td>
                        <code class="small">${job.id.substring(0, 8)}...</code>
                    </td>
                    <td>
                        <span class="text-truncate d-inline-block" style="max-width: 300px;" title="${job.inputPath}">
                            ${getFileName(job.inputPath)}
                        </span>
                        <br>
                        <small class="text-muted">${getDirectoryPath(job.inputPath)}</small>
                    </td>
                    <td>
                        <span class="badge bg-secondary">${job.targetApp}</span>
                    </td>
                    <td>
                        <small>${formatDateTime(job.createdAt)}</small>
                    </td>
                    <td>
                        <span class="text-muted">${job.duration}</span>
                    </td>
                    <td class="text-center">
                        ${job.retryCount > 0 ? `<span class="badge bg-warning">${job.retryCount}</span>` : '-'}
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm" role="group">
                            <button class="btn btn-outline-info" onclick="showJobDetails('${job.id}')" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            ${job.status === 'Failed' ? `
                                <button class="btn btn-outline-warning" onclick="retryJobFromTable('${job.id}')" title="Retry Job">
                                    <i class="fas fa-redo"></i>
                                </button>
                            ` : ''}
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function updatePagination(currentPage, totalPages, totalRecords) {
            const pagination = document.getElementById('pagination');
            const recordInfo = document.getElementById('recordInfo');
            
            recordInfo.textContent = `Showing ${((currentPage - 1) * parseInt(document.getElementById('pageSizeSelect').value)) + 1} to ${Math.min(currentPage * parseInt(document.getElementById('pageSizeSelect').value), totalRecords)} of ${totalRecords} entries`;

            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }

            let paginationHtml = '';
            
            // Previous button
            paginationHtml += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="loadQueueData(${currentPage - 1}); return false;">Previous</a>
                </li>
            `;

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                paginationHtml += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="loadQueueData(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            // Next button
            paginationHtml += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="loadQueueData(${currentPage + 1}); return false;">Next</a>
                </li>
            `;

            pagination.innerHTML = paginationHtml;
        }

        function showJobDetails(jobId) {
            // Find job in current data
            const day = document.getElementById('dayPicker')?.value || getLocalDateStr();
            const params = new URLSearchParams({
                page: 1,
                pageSize: 1000,
                status: 'all',
                search: jobId,
                day: day
            });

            fetch(`/Queue/GetQueueData?${params}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data.length > 0) {
                        const job = data.data[0];
                        displayJobDetails(job);
                        currentJobId = jobId;
                        
                        const modal = new bootstrap.Modal(document.getElementById('jobDetailsModal'));
                        modal.show();
                    }
                })
                .catch(error => showError('Error loading job details: ' + error.message));
        }

        function displayJobDetails(job) {
            const content = document.getElementById('jobDetailsContent');
            const retryBtn = document.getElementById('retryJobBtn');
            
            content.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-aselsan-blue">Basic Information</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Job ID:</strong></td><td><code>${job.id}</code></td></tr>
                            <tr><td><strong>Status:</strong></td><td><span class="badge bg-${getStatusColor(job.status)}">${job.status}</span></td></tr>
                            <tr><td><strong>Worker App:</strong></td><td><span class="badge bg-secondary">${job.targetApp}</span></td></tr>
                            <tr><td><strong>User:</strong></td><td>${job.userName}</td></tr>
                            <tr><td><strong>Retry Count:</strong></td><td>${job.retryCount}</td></tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-aselsan-blue">Timing Information</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Created:</strong></td><td>${formatDateTime(job.createdAt)}</td></tr>
                            <tr><td><strong>Started:</strong></td><td>${job.startedAt ? formatDateTime(job.startedAt) : '-'}</td></tr>
                            <tr><td><strong>Completed:</strong></td><td>${job.completedAt ? formatDateTime(job.completedAt) : '-'}</td></tr>
                            <tr><td><strong>Duration:</strong></td><td>${job.duration}</td></tr>
                        </table>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h6 class="text-aselsan-blue">File Paths</h6>
                        <div class="mb-2">
                            <strong>Input Path:</strong><br>
                            <code class="small">${job.inputPath}</code>
                        </div>
                        <div class="mb-2">
                            <strong>Output Path:</strong><br>
                            <code class="small">${job.outputPath || '-'}</code>
                        </div>
                        ${job.errorMessage ? `
                            <div class="mt-3">
                                <h6 class="text-danger">Error Message</h6>
                                <div class="alert alert-danger">
                                    <code>${job.errorMessage}</code>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;

            retryBtn.style.display = job.status === 'Failed' ? 'inline-block' : 'none';
        }

        function retryJob() {
            if (!currentJobId) return;
            retryJobFromTable(currentJobId);
        }

        function retryJobFromTable(jobId) {
            if (!confirm('Are you sure you want to retry this job?')) return;

            fetch('/Queue/RetryJob', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(jobId)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    loadQueueData(currentPage);
                    loadStatistics();
                    
                    // Close modal if open
                    const modal = bootstrap.Modal.getInstance(document.getElementById('jobDetailsModal'));
                    if (modal) modal.hide();
                } else {
                    showNotification(data.message, 'danger');
                }
            })
            .catch(error => {
                showNotification('Error retrying job: ' + error.message, 'danger');
            });
        }

        function resetFilters() {
            document.getElementById('statusFilter').value = 'all';
            document.getElementById('searchInput').value = '';
            document.getElementById('pageSizeSelect').value = '50';
            loadQueueData(1);
        }

        function exportData() {
            const params = new URLSearchParams({
                page: 1,
                pageSize: 10000,
                status: document.getElementById('statusFilter').value,
                search: document.getElementById('searchInput').value
            });

            fetch(`/Queue/GetQueueData?${params}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const csv = convertToCSV(data.data);
                        downloadCSV(csv, `queue-export-${new Date().toISOString().split('T')[0]}.csv`);
                        showNotification('Queue data exported successfully', 'success');
                    }
                })
                .catch(error => showError('Error exporting data: ' + error.message));
        }

        function convertToCSV(data) {
            if (data.length === 0) return '';
            
            const headers = ['Job ID', 'Status', 'Worker App', 'Input Path', 'Output Path', 'Created', 'Started', 'Completed', 'Duration', 'Retries', 'Error Message', 'User'];
            const rows = data.map(job => [
                job.id,
                job.status,
                job.targetApp,
                job.inputPath,
                job.outputPath || '',
                job.createdAt,
                job.startedAt || '',
                job.completedAt || '',
                job.duration,
                job.retryCount,
                job.errorMessage || '',
                job.userName
            ]);

            return [headers, ...rows].map(row => 
                row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')
            ).join('\n');
        }

        function downloadCSV(csv, filename) {
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function getStatusColor(status) {
            switch (status) {
                case 'Pending': return 'primary';
                case 'Processing': return 'warning';
                case 'Completed': return 'success';
                case 'Failed': return 'danger';
                default: return 'secondary';
            }
        }

        function getFileName(path) {
            return path.split('/').pop() || path.split('\\').pop() || path;
        }

        function getDirectoryPath(path) {
            const parts = path.split('/');
            return parts.length > 1 ? parts.slice(0, -1).join('/') : '';
        }

        function formatDateTime(dateTime) {
            if (!dateTime) return '-';
            return new Date(dateTime).toLocaleString();
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${getNotificationIcon(type)} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.classList.remove('show');
                    setTimeout(() => notification.remove(), 150);
                }
            }, 5000);
        }

        function showError(message) {
            showNotification(message, 'danger');
        }

        function getNotificationIcon(type) {
            switch (type) {
                case 'success': return 'check-circle';
                case 'danger': return 'exclamation-circle';
                case 'warning': return 'exclamation-triangle';
                case 'info': return 'info-circle';
                default: return 'bell';
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Queue page loaded, loading data...');
            initializeConnection();
            loadQueueData();
        });
    </script>
}