@{
    ViewData["Title"] = "Settings";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-aselsan-blue">
                        <i class="fas fa-cog me-2"></i>System Configuration
                    </h1>
                    <p class="text-muted mb-0">Manage system settings and configuration</p>
                </div>
                <div>
                    <span class="badge bg-aselsan-orange fs-6 px-3 py-2">
                        <i class="fas fa-shield-alt me-1"></i>Administrator
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Configuration Editor -->
    <div class="row">
        <div class="col-12">
            <div class="card fade-in-up">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-file-code me-2"></i>Configuration Editor
                    </h5>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-secondary me-2">config.json</span>
                        <span class="small text-muted" id="lastModified">Last modified: -</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label for="configEditor" class="form-label fw-bold">
                                        <i class="fas fa-edit me-1"></i>JSON Configuration
                                    </label>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button class="btn btn-outline-info" onclick="formatJson()" title="Format JSON">
                                            <i class="fas fa-magic"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary" onclick="validateJson()" title="Validate JSON">
                                            <i class="fas fa-check-circle"></i>
                                        </button>
                                        <button class="btn btn-outline-primary" onclick="loadConfig()" title="Reload">
                                            <i class="fas fa-sync-alt"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="position-relative">
                                    <textarea id="configEditor" class="form-control font-monospace" rows="25" 
                                              style="resize: vertical; background: #1e1e1e; color: #d4d4d4; border: 2px solid var(--aselsan-blue);">@ViewBag.ConfigData</textarea>
                                    <div id="lineNumbers" class="position-absolute top-0 start-0 text-muted small" 
                                         style="background: #2d2d2d; padding: 0.75rem 0.5rem; border-right: 1px solid #444; pointer-events: none;"></div>
                                </div>
                            </div>
                            <div class="d-flex gap-2 flex-wrap">
                                <button class="btn btn-primary" onclick="saveConfig()">
                                    <i class="fas fa-save me-2"></i>Save Configuration
                                </button>
                                <button class="btn btn-secondary" onclick="resetConfig()">
                                    <i class="fas fa-undo me-2"></i>Reset Changes
                                </button>
                                <button class="btn btn-outline-info" onclick="exportConfig()">
                                    <i class="fas fa-download me-2"></i>Export
                                </button>
                                <button class="btn btn-outline-warning" onclick="showImportModal()">
                                    <i class="fas fa-upload me-2"></i>Import
                                </button>
                            </div>
                            <div id="saveMessage" class="mt-3"></div>
                        </div>
                        <div class="col-lg-4">
                            <!-- Configuration Help -->
                            <div class="card">
                                <div class="card-header bg-light">
                                    <h6 class="card-title mb-0">
                                        <i class="fas fa-info-circle me-2"></i>Configuration Guide
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="accordion" id="configHelp">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#watchDir">
                                                    Watch Directory
                                                </button>
                                            </h2>
                                            <div id="watchDir" class="accordion-collapse collapse" data-bs-parent="#configHelp">
                                                <div class="accordion-body">
                                                    <code>"WatchDirectory"</code>: Path to monitor for new files.
                                                    <br><small class="text-muted">Example: "data/Test"</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#timeout">
                                                    Timeout Settings
                                                </button>
                                            </h2>
                                            <div id="timeout" class="accordion-collapse collapse" data-bs-parent="#configHelp">
                                                <div class="accordion-body">
                                                    <code>"TimeoutSeconds"</code>: Maximum job execution time.
                                                    <br><small class="text-muted">Example: 60</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#mappings">
                                                    Worker Mappings
                                                </button>
                                            </h2>
                                            <div id="mappings" class="accordion-collapse collapse" data-bs-parent="#configHelp">
                                                <div class="accordion-body">
                                                    <code>"Mappings"</code>: Define worker applications for each subdirectory.
                                                    <br><small class="text-muted">ExecutablePath and OutputDirectory required</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Validation Status -->
                            <div class="card mt-3">
                                <div class="card-header bg-light">
                                    <h6 class="card-title mb-0">
                                        <i class="fas fa-shield-alt me-2"></i>Validation Status
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div id="validationStatus" class="text-center py-3">
                                        <div class="text-muted">
                                            <i class="fas fa-hourglass-half fa-2x mb-2"></i>
                                            <p class="mb-0">Ready to validate</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let originalConfig = '';

        document.addEventListener('DOMContentLoaded', function() {
            originalConfig = document.getElementById('configEditor').value;
            updateLineNumbers();
            updateLastModified();
            validateJson();
            
            // Auto-update line numbers on scroll/input
            const editor = document.getElementById('configEditor');
            editor.addEventListener('input', updateLineNumbers);
            editor.addEventListener('scroll', syncLineNumbers);
        });

        function saveConfig() {
            const configText = document.getElementById('configEditor').value;
            const btn = event.target;
            const originalHtml = btn.innerHTML;
            
            btn.disabled = true;
            btn.innerHTML = '<div class="loading-spinner"></div>Saving...';
            
            fetch('/Settings/SaveConfig', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(configText)
            })
            .then(response => response.json())
            .then(data => {
                btn.disabled = false;
                btn.innerHTML = originalHtml;
                
                const messageDiv = document.getElementById('saveMessage');
                if (data.success) {
                    messageDiv.innerHTML = `
                        <div class="alert alert-success alert-dismissible fade show">
                            <i class="fas fa-check-circle me-2"></i>${data.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>`;
                    originalConfig = configText;
                    updateLastModified();
                    showNotification('Configuration saved successfully', 'success');
                } else {
                    messageDiv.innerHTML = `
                        <div class="alert alert-danger alert-dismissible fade show">
                            <i class="fas fa-exclamation-circle me-2"></i>${data.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>`;
                    showNotification('Failed to save configuration', 'danger');
                }
                
                setTimeout(() => {
                    messageDiv.innerHTML = '';
                }, 5000);
            })
            .catch(error => {
                btn.disabled = false;
                btn.innerHTML = originalHtml;
                document.getElementById('saveMessage').innerHTML = `
                    <div class="alert alert-danger alert-dismissible fade show">
                        <i class="fas fa-exclamation-triangle me-2"></i>Error: ${error.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>`;
                showNotification('Error saving configuration', 'danger');
            });
        }

        function loadConfig() {
            const btn = event.target;
            const originalHtml = btn.innerHTML;
            
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            
            fetch('/Settings/GetConfig')
                .then(response => response.json())
                .then(data => {
                    btn.disabled = false;
                    btn.innerHTML = originalHtml;
                    
                    if (data.success) {
                        document.getElementById('configEditor').value = data.config;
                        originalConfig = data.config;
                        updateLineNumbers();
                        validateJson();
                        showNotification('Configuration reloaded', 'info');
                    } else {
                        showNotification(data.message, 'danger');
                    }
                })
                .catch(error => {
                    btn.disabled = false;
                    btn.innerHTML = originalHtml;
                    showNotification('Error loading configuration: ' + error.message, 'danger');
                });
        }

        function formatJson() {
            try {
                const configText = document.getElementById('configEditor').value;
                const parsed = JSON.parse(configText);
                const formatted = JSON.stringify(parsed, null, 2);
                document.getElementById('configEditor').value = formatted;
                updateLineNumbers();
                validateJson();
                showNotification('JSON formatted successfully', 'success');
            } catch (error) {
                showNotification('Invalid JSON: ' + error.message, 'danger');
                updateValidationStatus(false, error.message);
            }
        }

        function validateJson() {
            try {
                const configText = document.getElementById('configEditor').value;
                JSON.parse(configText);
                updateValidationStatus(true);
                return true;
            } catch (error) {
                updateValidationStatus(false, error.message);
                return false;
            }
        }

        function updateValidationStatus(isValid, error = '') {
            const statusDiv = document.getElementById('validationStatus');
            
            if (isValid) {
                statusDiv.innerHTML = `
                    <div class="text-success">
                        <i class="fas fa-check-circle fa-2x mb-2"></i>
                        <p class="mb-0 fw-bold">Valid JSON</p>
                        <small class="text-muted">Configuration is syntactically correct</small>
                    </div>`;
            } else {
                statusDiv.innerHTML = `
                    <div class="text-danger">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                        <p class="mb-1 fw-bold">Invalid JSON</p>
                        <small class="text-muted">${error}</small>
                    </div>`;
            }
        }

        function resetConfig() {
            if (confirm('Are you sure you want to reset all changes?')) {
                document.getElementById('configEditor').value = originalConfig;
                updateLineNumbers();
                validateJson();
                showNotification('Configuration reset', 'info');
            }
        }

        function exportConfig() {
            try {
                const configText = document.getElementById('configEditor').value;
                JSON.parse(configText); // Validate first
                
                const blob = new Blob([configText], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `config-${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                showNotification('Configuration exported', 'success');
            } catch (error) {
                showNotification('Cannot export invalid JSON', 'danger');
            }
        }

        function showImportModal() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        try {
                            const content = e.target.result;
                            JSON.parse(content); // Validate
                            document.getElementById('configEditor').value = content;
                            updateLineNumbers();
                            validateJson();
                            showNotification('Configuration imported successfully', 'success');
                        } catch (error) {
                            showNotification('Invalid JSON file: ' + error.message, 'danger');
                        }
                    };
                    reader.readAsText(file);
                }
            };
            input.click();
        }

        function updateLineNumbers() {
            const editor = document.getElementById('configEditor');
            const lineNumbers = document.getElementById('lineNumbers');
            const lines = editor.value.split('\\n').length;
            
            let numbers = '';
            for (let i = 1; i <= lines; i++) {
                numbers += i + '\\n';
            }
            lineNumbers.textContent = numbers;
        }

        function syncLineNumbers() {
            const editor = document.getElementById('configEditor');
            const lineNumbers = document.getElementById('lineNumbers');
            lineNumbers.scrollTop = editor.scrollTop;
        }

        function updateLastModified() {
            const now = new Date();
            document.getElementById('lastModified').textContent = `Last modified: ${now.toLocaleString()}`;
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${getNotificationIcon(type)} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.classList.remove('show');
                    setTimeout(() => notification.remove(), 150);
                }
            }, 5000);
        }

        function getNotificationIcon(type) {
            switch (type) {
                case 'success': return 'check-circle';
                case 'danger': return 'exclamation-circle';
                case 'warning': return 'exclamation-triangle';
                case 'info': return 'info-circle';
                default: return 'bell';
            }
        }

        // Auto-save on Ctrl+S
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                saveConfig();
            }
        });

        // Auto-validation on input
        document.getElementById('configEditor').addEventListener('input', function() {
            clearTimeout(this.validationTimer);
            this.validationTimer = setTimeout(validateJson, 1000);
        });
    </script>
} 